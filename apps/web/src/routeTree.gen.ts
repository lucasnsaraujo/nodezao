/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OffersIndexRouteImport } from './routes/offers/index'
import { Route as OffersNewRouteImport } from './routes/offers/new'
import { Route as OffersOfferIdRouteImport } from './routes/offers/$offerId'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OffersIndexRoute = OffersIndexRouteImport.update({
  id: '/offers/',
  path: '/offers/',
  getParentRoute: () => rootRouteImport,
} as any)
const OffersNewRoute = OffersNewRouteImport.update({
  id: '/offers/new',
  path: '/offers/new',
  getParentRoute: () => rootRouteImport,
} as any)
const OffersOfferIdRoute = OffersOfferIdRouteImport.update({
  id: '/offers/$offerId',
  path: '/offers/$offerId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/settings': typeof SettingsRoute
  '/offers/$offerId': typeof OffersOfferIdRoute
  '/offers/new': typeof OffersNewRoute
  '/offers': typeof OffersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/settings': typeof SettingsRoute
  '/offers/$offerId': typeof OffersOfferIdRoute
  '/offers/new': typeof OffersNewRoute
  '/offers': typeof OffersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/settings': typeof SettingsRoute
  '/offers/$offerId': typeof OffersOfferIdRoute
  '/offers/new': typeof OffersNewRoute
  '/offers/': typeof OffersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/settings'
    | '/offers/$offerId'
    | '/offers/new'
    | '/offers'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/settings'
    | '/offers/$offerId'
    | '/offers/new'
    | '/offers'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/settings'
    | '/offers/$offerId'
    | '/offers/new'
    | '/offers/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  LoginRoute: typeof LoginRoute
  SettingsRoute: typeof SettingsRoute
  OffersOfferIdRoute: typeof OffersOfferIdRoute
  OffersNewRoute: typeof OffersNewRoute
  OffersIndexRoute: typeof OffersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/offers/': {
      id: '/offers/'
      path: '/offers'
      fullPath: '/offers'
      preLoaderRoute: typeof OffersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/offers/new': {
      id: '/offers/new'
      path: '/offers/new'
      fullPath: '/offers/new'
      preLoaderRoute: typeof OffersNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/offers/$offerId': {
      id: '/offers/$offerId'
      path: '/offers/$offerId'
      fullPath: '/offers/$offerId'
      preLoaderRoute: typeof OffersOfferIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  LoginRoute: LoginRoute,
  SettingsRoute: SettingsRoute,
  OffersOfferIdRoute: OffersOfferIdRoute,
  OffersNewRoute: OffersNewRoute,
  OffersIndexRoute: OffersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
